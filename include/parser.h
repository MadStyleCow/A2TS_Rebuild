#ifndef PARSER_H
#define PARSER_H

#include <qregexp>
#include <qstring>

#pragma pack(push, 1)

struct argsComPOS
{
  float posX;			//позиция игрока по горизонтали.
  float posY;			//позиция игрока по вертикали.
  float posZ;			//высота по отношению к морю.
  int Dir;				//направление взгляда игрока.
  int Mode;				//громкость речи (0 – шёпот, 1 – нормальный голос, 2 – крик)
  QString vehId;  		//идентификатор техники (если 0 - на ногах).
  int isOut;      		//индикатор высунности (не используется если vehId = 0)
  float kvChanArray[4];	// Частоты кв раций
  float kvVolArray[4];	// Громкости кв раций
  int kvPosArray[4];	// Ухо в котором слышна рация (0 - лево, 1 - центр, 2 - право)
  int kvActive;			//указание какой канал КВ активен (в какой мы говорим).
  int kvSide;     		//указание какой стороне принадлежит данная КВ рация.
  float dvChanArray[4];	// Частоты кв раций
  float dvVolArray[4];  // Громкости дв раций
  int dvPosArray[4];	// Ухо в котором слышна рация (0 - лево, 1 - центр, 2 - право)
  int dvActive;			//указание какой канал КВ активен (в какой мы говорим).
  int dvSide;     		//указание какой стороне принадлежит данная КВ рация.
  int TAN;				//Тангента (какую кнопку нажал пользователь) (0 - Голос, 1 - КВ, 2 - ДВ)
  int talking;			// Указание того, говорю ли я в данный момент или нет. (0 - молчу, 1 - голос, 2 - кв, 3 - дв)
};

struct argsComOTH
{
  float posX;				//позиция игрока по горизонтали.
  float posY;				//позиция игрока по вертикали.
  float posZ;				//высота по отношению к морю.
  int Dir;					//направление взгляда игрока.
  int Mode;					//громкость речи (0 – шёпот, 1 – нормальный голос, 2 – крик)
  QString vehId;  			//идентификатор техники (если 0 - на ногах).
  int isOut;      			//индикатор высунности (не используется если vehId = 0)
  float kvChanArray[4];		// Частоты кв раций
  int kvActive;				//указание какой канал КВ активен (в какой мы говорим).
  int kvSide;     			//указание какой стороне принадлежит данная КВ рация.
  float dvChanArray[4];		// Частоты кв раций
  int dvActive;				//указание какой канал КВ активен (в какой мы говорим).
  int dvSide;     			//указание какой стороне принадлежит данная КВ рация.
  int TAN;					//Тангента (какую кнопку нажал пользователь) (0 - Голос, 1 - КВ, 2 - ДВ)
  int hearableKV;			// Канал КВ на котором слышен этот игрок.
  int hearableCrossKV;		// Канал КВ на котором слышен этот игрок говорящий в ДВ.
  int hearableDV;			// Канал ДВ на котором слышен этот игрок.
  int hearableCrossDV;		// Канал ДВ на котором слышен этот игрок говорящий в КВ.
  int talking;				// Говорит ли игрок  (0 - нет, 1 - голос, 2 - кв, 3 - говорит в КВ но слышен в ДВ, 4 - дв, 5 - говорит в ДВ но слышен в КВ)
  int oldHearableKV;		// Канал КВ на котором слышен этот игрок. Данные прошлого фрейма, требуются для правильного проигрывания пиков рации.
  int oldHearableCrossKV;	// Канал КВ на котором слышен этот игрок говорящий в ДВ. Данные прошлого фрейма, требуются для правильного проигрывания пиков рации.
  int oldHearableDV;		// Канал ДВ на котором слышен этот игрок. Данные прошлого фрейма, требуются для правильного проигрывания пиков рации.
  int oldHearableCrossDV;	// Канал ДВ на котором слышен этот игрок говорящий в КВ. Данные прошлого фрейма, требуются для правильного проигрывания пиков рации.
  int oldTalking;			// Говорит ли игрок  (0 - нет, 1 - голос, 2 - кв, 3 - говорит в КВ но слышен в ДВ, 4 - дв, 5 - говорит в ДВ но слышен в КВ) Данные прошлого фрейма, требуются для правильного проигрывания пиков рации.
  int endedTalking;			// Закончил ли игрок говорить. Требуется для правильного проигрывания пиков рации.
};

struct argsComMIN
{
  float posX;			//позиция игрока по горизонтали.
  float posY;			//позиция игрока по вертикали.
  float posZ;			//высота по отношению к морю.
  int Dir;				//направление взгляда игрока.
  int Mode;				//громкость речи (0 – шёпот, 1 – нормальный голос, 2 – крик)
  int TAN;				//Тангента (какую кнопку нажал пользователь) (0 - Голос, 1 - КВ, 2 - ДВ)
};

struct argsGameType
{
	int game;	// Индикатор игры
};
#pragma pack(pop)

#define I_COMMAND_POSITION      10      //первый символ команды
#define I_COMMAND_LENGTH        3       //длина команды
#define I_ARGS_POSITION         34      //первый символ блока аргументов
#define I_ARGS_IN_POS           36      //количество аргументов в POS
#define I_ARGS_IN_OTH           20      //количество аргументов в OTH
#define I_Args_IN_GAMETYPE		1		// Количество аргументов в GameType

//! Парсер
/*! Коды возврата:
    0     - неизвестная команда;
    1     - невалидное сообщение;

    10    - успешно обработана команда POS;
    11    - успешно обработана команда OTH;
    12    - успешно обработана команда MIN;
    13    - успешно обработана команда REQ;
	14    - успешно обработана команда VER;

    102   - ошибка преобразования аргумента в команде POS;
    112   - ошибка преобразования аргумента в команде OTH;
    122   - ошибка преобразования аргумента в команде MIN;
	142   - ошибка преобразования аргумента в команде VER;
    */
int commandCheck( std::string messageWS, argsComPOS &args_pos,
                  argsComOTH &args_oth, argsComMIN &args_min, argsGameType &args_type);

#endif // PARSER_H
